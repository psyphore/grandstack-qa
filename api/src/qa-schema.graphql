type User {
  id: ID!
  name: String!
  email: String!
}

type Project {
  id: ID!
  name: String!
  description: String
  produtCount: Int
    @cypher(statement: "MATCH (this)-[:PART_OF]->(p:Product) RETURN COUNT(p)")
  releases: [Release] @relation(name: "RELEASED", direction: "OUT")
  product: [Product] @relation(name: "INCLUDES", direction: "IN")
  leadBy: [User] @relation(name: "LEAD_BY", direction: "IN")
  contributors: [User] @relation(name: "CONTRIBUTES", direction: "IN")
}

type Product {
  id: ID!
  name: String!
  description: String
}

type Release {
  id: ID!
  name: String!
  description: String
  version: String!
  stories: [Story] @relation(name: "PART_OF", direction: "IN")
  avgPoints: Float
    @cypher(
      statement: "MATCH (this)<-[:PART_OF]-(s:Story) RETURN apoc.convert.toFloat(avg(s.points))"
    )
    leadBy: [User] @relation(name: "LEAD_BY", direction: "IN")
    product: [Product] @relation(name: "INCLUDES", direction: "IN")
}

type Story {
  id: ID!
  summary: String!
  description: String!
  points: Int!
  type: STORY_TYPE
  subTasks: [Story] @relation(name: "SUB_TASK", direction: "IN")
}

type Article {
  id: ID!
  name: String!
  mimeType: String!
  data: String!
  created: Int!
}

enum STORY_TYPE {
  BUG
  TASK
  FEATURE
  INVESTIGATION
}
